/*!
* ember-widgets v0.2.0
* Copyright 2013-2015 Addepar Inc.
* See LICENSE.
*/
eval("(function() {\n\nvar _ref;\n\nEmber.Widgets = Ember.Namespace.create();\n\nEmber.Widgets.VERSION = '0.2.0';\n\nEmber.Widgets.DISABLE_ANIMATIONS = false;\n\nif ((_ref = Ember.libraries) != null) {\n  _ref.register('Ember Widgets', Ember.Widgets.VERSION);\n}\n\n\n})();//@ sourceURL=build/src/ember_widgets.js")

eval("(function() {\n\nEmber.AddeparMixins = Ember.AddeparMixins || Ember.Namespace.create();\n\nEmber.AddeparMixins.ResizeHandlerMixin = Ember.Mixin.create({\n  resizeEndDelay: 200,\n  resizing: false,\n  onResizeStart: Ember.K,\n  onResizeEnd: Ember.K,\n  onResize: Ember.K,\n  endResize: Ember.computed(function() {\n    return function(event) {\n      if (this.isDestroyed) {\n        return;\n      }\n      this.set('resizing', false);\n      return typeof this.onResizeEnd === \"function\" ? this.onResizeEnd(event) : void 0;\n    };\n  }),\n  handleWindowResize: function(event) {\n    if (!this.get('resizing')) {\n      this.set('resizing', true);\n      if (typeof this.onResizeStart === \"function\") {\n        this.onResizeStart(event);\n      }\n    }\n    if (typeof this.onResize === \"function\") {\n      this.onResize(event);\n    }\n    return Ember.run.debounce(this, this.get('endResize'), event, this.get('resizeEndDelay'));\n  },\n  didInsertElement: function() {\n    this._super();\n    return this._setupResizeDocumentHandlers();\n  },\n  willDestroyElement: function() {\n    this._removeResizeDocumentHandlers();\n    return this._super();\n  },\n  _setupResizeDocumentHandlers: function() {\n    if (this._resizeHandler) {\n      return;\n    }\n    this._resizeHandler = jQuery.proxy(this.get('handleWindowResize'), this);\n    return jQuery(window).on(\"resize.\" + this.elementId, this._resizeHandler);\n  },\n  _removeResizeDocumentHandlers: function() {\n    jQuery(window).off(\"resize.\" + this.elementId, this._resizeHandler);\n    return this._resizeHandler = null;\n  }\n});\n\n\n})();//@ sourceURL=dependencies/ember-addepar-mixins/resize_handler.js")

eval("(function() {\n\nEmber.TEMPLATES[\"color-picker\"] = Ember.Handlebars.template({\"1\":function(depth0,helpers,partials,data) {\n  var escapeExpression=this.escapeExpression, buffer = '';\n  data.buffer.push(\"      \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Widgets.ColorPickerCell\", {\"name\":\"view\",\"hash\":{\n    'classNames': (\"color-picker-cell-transparent\"),\n    'colorBinding': (\"selectedColor\")\n  },\"hashTypes\":{'classNames': \"STRING\",'colorBinding': \"STRING\"},\"hashContexts\":{'classNames': depth0,'colorBinding': depth0},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data})));\n  data.buffer.push(\"\\n\");\n  return buffer;\n},\"3\":function(depth0,helpers,partials,data) {\n  var escapeExpression=this.escapeExpression, buffer = '';\n  data.buffer.push(\"      \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Widgets.ColorPickerCell\", {\"name\":\"view\",\"hash\":{\n    'colorBinding': (\"selectedColor\")\n  },\"hashTypes\":{'colorBinding': \"STRING\"},\"hashContexts\":{'colorBinding': depth0},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data})));\n  data.buffer.push(\"\\n\");\n  return buffer;\n},\"5\":function(depth0,helpers,partials,data) {\n  var stack1, buffer = '';\n  data.buffer.push(\"      <div class=\\\"color-row clearfix\\\">\\n\");\n  stack1 = helpers.each.call(depth0, \"color\", \"in\", \"row\", {\"name\":\"each\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"fn\":this.program(6, data),\"inverse\":this.noop,\"types\":[\"ID\",\"ID\",\"ID\"],\"contexts\":[depth0,depth0,depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  data.buffer.push(\"      </div>\\n      <hr>\\n\");\n  return buffer;\n},\"6\":function(depth0,helpers,partials,data) {\n  var escapeExpression=this.escapeExpression, buffer = '';\n  data.buffer.push(\"          \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Widgets.ColorPickerCell\", {\"name\":\"view\",\"hash\":{\n    'colorBinding': (\"color\")\n  },\"hashTypes\":{'colorBinding': \"STRING\"},\"hashContexts\":{'colorBinding': depth0},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data})));\n  data.buffer.push(\"\\n\");\n  return buffer;\n},\"compiler\":[6,\">= 2.0.0-beta.1\"],\"main\":function(depth0,helpers,partials,data) {\n  var stack1, escapeExpression=this.escapeExpression, buffer = '';\n  data.buffer.push(\"<div class=\\\"dropdown\\\">\\n  <a class=\\\"clearfix color-picker-dropdown-button\\\" data-toggle=\\\"dropdown\\\" href=\\\"#\\\">\\n\");\n  stack1 = helpers['if'].call(depth0, \"isColorTransparent\", {\"name\":\"if\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"fn\":this.program(1, data),\"inverse\":this.program(3, data),\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  data.buffer.push(\"    <span class=\\\"pull-right fa fa-caret-down color-picker-dropdown-caret\\\"></span>\\n  </a>\\n  <div \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {\"name\":\"bind-attr\",\"hash\":{\n    'class': (\":dropdown-menu :color-picker-dropdown dropdownClass\")\n  },\"hashTypes\":{'class': \"STRING\"},\"hashContexts\":{'class': depth0},\"types\":[],\"contexts\":[],\"data\":data})));\n  data.buffer.push(\"\\n    role=\\\"menu\\\" aria-labelledby=\\\"dLabel\\\">\\n\");\n  stack1 = helpers.each.call(depth0, \"row\", \"in\", \"colorRows\", {\"name\":\"each\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"fn\":this.program(5, data),\"inverse\":this.noop,\"types\":[\"ID\",\"ID\",\"ID\"],\"contexts\":[depth0,depth0,depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  data.buffer.push(\"    <form \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {\"name\":\"bind-attr\",\"hash\":{\n    'class': (\":color-picker-custom-form isCustomColorValid:valid:invalid\")\n  },\"hashTypes\":{'class': \"STRING\"},\"hashContexts\":{'class': depth0},\"types\":[],\"contexts\":[],\"data\":data})));\n  data.buffer.push(\">\\n      <div class=\\\"form-group form-group-sm\\\">\\n        <div class=\\\"input-group\\\">\\n          <span \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {\"name\":\"bind-attr\",\"hash\":{\n    'style': (\"customColorCSS\"),\n    'class': (\":input-group-addon\\n            :color-picker-custom-preview isCustomColor:active\")\n  },\"hashTypes\":{'style': \"STRING\",'class': \"STRING\"},\"hashContexts\":{'style': depth0,'class': depth0},\"types\":[],\"contexts\":[],\"data\":data})));\n  data.buffer.push(\"></span>\\n          \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.TextField\", {\"name\":\"view\",\"hash\":{\n    'placeholder': (\"HEX code\"),\n    'type': (\"text\"),\n    'class': (\"form-control input-sm\"),\n    'valueBinding': (\"customColor\")\n  },\"hashTypes\":{'placeholder': \"STRING\",'type': \"STRING\",'class': \"STRING\",'valueBinding': \"STRING\"},\"hashContexts\":{'placeholder': depth0,'type': depth0,'class': depth0,'valueBinding': depth0},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data})));\n  data.buffer.push(\"\\n        </div>\\n      </div>\\n    </form>\\n  </div>\\n</div>\\n\");\n  return buffer;\n},\"useData\":true});\n\nEmber.TEMPLATES[\"modal-footer\"] = Ember.Handlebars.template({\"1\":function(depth0,helpers,partials,data) {\n  var stack1, escapeExpression=this.escapeExpression, buffer = '';\n  data.buffer.push(\"  <button type=\\\"button\\\"\\n    \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {\"name\":\"bind-attr\",\"hash\":{\n    'class': (\":btn :btn-primary :btn-confirm isValid::disabled\")\n  },\"hashTypes\":{'class': \"STRING\"},\"hashContexts\":{'class': depth0},\"types\":[],\"contexts\":[],\"data\":data})));\n  data.buffer.push(\"\\n    \");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sendConfirm\", {\"name\":\"action\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"STRING\"],\"contexts\":[depth0],\"data\":data})));\n  data.buffer.push(\">\");\n  stack1 = helpers._triageMustache.call(depth0, \"confirmText\", {\"name\":\"_triageMustache\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n  </button>\\n\");\n  return buffer;\n},\"3\":function(depth0,helpers,partials,data) {\n  var stack1, escapeExpression=this.escapeExpression, buffer = '';\n  data.buffer.push(\"  <button type=\\\"button\\\" class=\\\"btn btn-default btn-cancel\\\"\\n    \");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sendCancel\", {\"name\":\"action\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"STRING\"],\"contexts\":[depth0],\"data\":data})));\n  data.buffer.push(\">\");\n  stack1 = helpers._triageMustache.call(depth0, \"cancelText\", {\"name\":\"_triageMustache\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n  </button>\\n\");\n  return buffer;\n},\"5\":function(depth0,helpers,partials,data) {\n  var stack1, escapeExpression=this.escapeExpression, buffer = '';\n  data.buffer.push(\"  <button type=\\\"button\\\" class=\\\"btn btn-default btn-close\\\"\\n    \");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sendClose\", {\"name\":\"action\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"STRING\"],\"contexts\":[depth0],\"data\":data})));\n  data.buffer.push(\">\");\n  stack1 = helpers._triageMustache.call(depth0, \"closeText\", {\"name\":\"_triageMustache\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n  </button>\\n\");\n  return buffer;\n},\"compiler\":[6,\">= 2.0.0-beta.1\"],\"main\":function(depth0,helpers,partials,data) {\n  var stack1, buffer = '';\n  stack1 = helpers['if'].call(depth0, \"confirmText\", {\"name\":\"if\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"fn\":this.program(1, data),\"inverse\":this.noop,\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  stack1 = helpers['if'].call(depth0, \"cancelText\", {\"name\":\"if\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"fn\":this.program(3, data),\"inverse\":this.noop,\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  stack1 = helpers['if'].call(depth0, \"closeText\", {\"name\":\"if\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"fn\":this.program(5, data),\"inverse\":this.noop,\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  return buffer;\n},\"useData\":true});\n\nEmber.TEMPLATES[\"modal\"] = Ember.Handlebars.template({\"compiler\":[6,\">= 2.0.0-beta.1\"],\"main\":function(depth0,helpers,partials,data) {\n  var escapeExpression=this.escapeExpression, buffer = '';\n  data.buffer.push(\"<div \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {\"name\":\"bind-attr\",\"hash\":{\n    'class': (\":modal-dialog sizeClass\")\n  },\"hashTypes\":{'class': \"STRING\"},\"hashContexts\":{'class': depth0},\"types\":[],\"contexts\":[],\"data\":data})));\n  data.buffer.push(\">\\n  <div class=\\\"modal-content\\\">\\n    <div class=\\\"modal-header\\\">\\n      \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"_headerViewClass\", {\"name\":\"view\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data})));\n  data.buffer.push(\"\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n      \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"_contentViewClass\", {\"name\":\"view\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data})));\n  data.buffer.push(\"\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n      \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"_footerViewClass\", {\"name\":\"view\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data})));\n  data.buffer.push(\"\\n    </div>\\n  </div>\\n</div>\\n\");\n  return buffer;\n},\"useData\":true});\n\nEmber.TEMPLATES[\"modal_header\"] = Ember.Handlebars.template({\"compiler\":[6,\">= 2.0.0-beta.1\"],\"main\":function(depth0,helpers,partials,data) {\n  var stack1, escapeExpression=this.escapeExpression, buffer = '';\n  data.buffer.push(\"<button type=\\\"button\\\" class=\\\"close\\\" \");\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"sendClose\", {\"name\":\"action\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"STRING\"],\"contexts\":[depth0],\"data\":data})));\n  data.buffer.push(\">&times;</button>\\n<h4 class=\\\"modal-title\\\">\");\n  stack1 = helpers._triageMustache.call(depth0, \"headerText\", {\"name\":\"_triageMustache\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  data.buffer.push(\"</h4>\\n\");\n  return buffer;\n},\"useData\":true});\n\nEmber.TEMPLATES[\"popover-link-popover\"] = Ember.Handlebars.template({\"1\":function(depth0,helpers,partials,data) {\n  var stack1, buffer = '';\n  data.buffer.push(\"  <h4 class=\\\"popover-title\\\">\");\n  stack1 = helpers._triageMustache.call(depth0, \"title\", {\"name\":\"_triageMustache\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  data.buffer.push(\"</h4>\\n\");\n  return buffer;\n},\"compiler\":[6,\">= 2.0.0-beta.1\"],\"main\":function(depth0,helpers,partials,data) {\n  var stack1, escapeExpression=this.escapeExpression, buffer = '';\n  data.buffer.push(\"<div class=\\\"arrow\\\" \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {\"name\":\"bind-attr\",\"hash\":{\n    'style': (\"view.arrowStyle\")\n  },\"hashTypes\":{'style': \"STRING\"},\"hashContexts\":{'style': depth0},\"types\":[],\"contexts\":[],\"data\":data})));\n  data.buffer.push(\"></div>\\n\");\n  stack1 = helpers['if'].call(depth0, \"title\", {\"name\":\"if\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"fn\":this.program(1, data),\"inverse\":this.noop,\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  data.buffer.push(\"<div class=\\\"popover-content\\\">\\n  \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"view._contentViewClass\", {\"name\":\"view\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data})));\n  data.buffer.push(\"\\n</div>\\n\");\n  return buffer;\n},\"useData\":true});\n\nEmber.TEMPLATES[\"popover\"] = Ember.Handlebars.template({\"1\":function(depth0,helpers,partials,data) {\n  var stack1, buffer = '';\n  data.buffer.push(\"  <h4 class=\\\"popover-title\\\">\");\n  stack1 = helpers._triageMustache.call(depth0, \"title\", {\"name\":\"_triageMustache\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  data.buffer.push(\"</h4>\\n\");\n  return buffer;\n},\"compiler\":[6,\">= 2.0.0-beta.1\"],\"main\":function(depth0,helpers,partials,data) {\n  var stack1, escapeExpression=this.escapeExpression, buffer = '';\n  data.buffer.push(\"<div class=\\\"arrow\\\" \");\n  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {\"name\":\"bind-attr\",\"hash\":{\n    'style': (\"arrowStyle\")\n  },\"hashTypes\":{'style': \"STRING\"},\"hashContexts\":{'style': depth0},\"types\":[],\"contexts\":[],\"data\":data})));\n  data.buffer.push(\"></div>\\n\");\n  stack1 = helpers['if'].call(depth0, \"title\", {\"name\":\"if\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"fn\":this.program(1, data),\"inverse\":this.noop,\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data});\n  if (stack1 != null) { data.buffer.push(stack1); }\n  data.buffer.push(\"<div class=\\\"popover-content\\\">\\n  \");\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"view._contentViewClass\", {\"name\":\"view\",\"hash\":{},\"hashTypes\":{},\"hashContexts\":{},\"types\":[\"ID\"],\"contexts\":[depth0],\"data\":data})));\n  data.buffer.push(\"\\n</div>\\n\");\n  return buffer;\n},\"useData\":true});\n\n})();//@ sourceURL=build/src/templates.js")

eval("(function() {\n\nEmber.Widgets.StyleBindingsMixin = Ember.Mixin.create({\n  concatenatedProperties: ['styleBindings'],\n  attributeBindings: ['style'],\n  unitType: 'px',\n  createStyleString: function(styleName, property) {\n    var value;\n    value = this.get(property);\n    if (value === void 0) {\n      return;\n    }\n    if (Ember.typeOf(value) === 'number') {\n      value = value + this.get('unitType');\n    }\n    return \"\" + styleName + \":\" + value + \";\";\n  },\n  applyStyleBindings: function() {\n    var lookup, properties, styleBindings, styleComputed, styles,\n      _this = this;\n    styleBindings = this.styleBindings;\n    if (!styleBindings) {\n      return;\n    }\n    lookup = {};\n    styleBindings.forEach(function(binding) {\n      var property, style, _ref;\n      _ref = binding.split(':'), property = _ref[0], style = _ref[1];\n      return lookup[style || property] = property;\n    });\n    styles = _.keys(lookup);\n    properties = _.values(lookup);\n    styleComputed = Ember.computed(function() {\n      var styleString, styleTokens;\n      styleTokens = styles.map(function(style) {\n        return _this.createStyleString(style, lookup[style]);\n      });\n      styleString = styleTokens.join('');\n      if (styleString.length !== 0) {\n        return styleString;\n      }\n    });\n    styleComputed.property.apply(styleComputed, properties);\n    return Ember.defineProperty(this, 'style', styleComputed);\n  },\n  init: function() {\n    this.applyStyleBindings();\n    return this._super();\n  }\n});\n\nEmber.Widgets.BodyEventListener = Ember.Mixin.create({\n  bodyElementSelector: 'html',\n  bodyClick: Ember.K,\n  didInsertElement: function() {\n    this._super();\n    return Ember.run.next(this, this._setupDocumentHandlers);\n  },\n  willDestroyElement: function() {\n    this._super();\n    return this._removeDocumentHandlers();\n  },\n  _setupDocumentHandlers: function() {\n    var _this = this;\n    if (this._clickHandler || this.isDestroying) {\n      return;\n    }\n    this._clickHandler = function(event) {\n      return Ember.run(function() {\n        if ((_this.get('_state') || _this.get('state')) === 'inDOM' && Ember.isEmpty(_this.$().has($(event.target)))) {\n          return _this.bodyClick();\n        }\n      });\n    };\n    return $(this.get('bodyElementSelector')).on(\"click\", this._clickHandler);\n  },\n  _removeDocumentHandlers: function() {\n    $(this.get('bodyElementSelector')).off(\"click\", this._clickHandler);\n    return this._clickHandler = null;\n  }\n});\n\n\n})();//@ sourceURL=build/src/mixins.js")

eval("(function() {\n\nEmber.Widgets.ModalComponent = Ember.Component.extend(Ember.Widgets.StyleBindingsMixin, {\n  layoutName: 'modal',\n  classNames: ['modal'],\n  classNameBindings: ['isShowing:in', 'hasCloseButton::has-no-close-button', 'fadeEnabled:fade'],\n  modalPaneBackdrop: '<div class=\"modal-backdrop\"></div>',\n  bodyElementSelector: '.modal-backdrop',\n  enforceModality: false,\n  escToCancel: true,\n  backdrop: true,\n  isShowing: false,\n  hasCloseButton: true,\n  fade: true,\n  headerText: \"Modal Header\",\n  confirmText: \"Confirm\",\n  cancelText: \"Cancel\",\n  closeText: null,\n  content: \"\",\n  size: \"normal\",\n  isValid: true,\n  fadeEnabled: Ember.computed(function() {\n    if (Ember.Widgets.DISABLE_ANIMATIONS) {\n      return false;\n    }\n    return this.get('fade');\n  }).property('fade'),\n  confirm: Ember.K,\n  cancel: Ember.K,\n  close: Ember.K,\n  headerViewClass: Ember.View.extend({\n    template: Ember.Handlebars.compile('<button type=\"button\" class=\"close\" {{action \"sendClose\"}}>&times;</button><h4 class=\"modal-title\">{{headerText}}</h4>')\n  }),\n  contentViewClass: Ember.View.extend({\n    template: Ember.Handlebars.compile(\"<p>{{content}}</p>\")\n  }),\n  footerViewClass: Ember.View.extend({\n    templateName: 'modal-footer'\n  }),\n  _headerViewClass: Ember.computed(function() {\n    var headerViewClass;\n    headerViewClass = this.get('headerViewClass');\n    if (typeof headerViewClass === 'string') {\n      return Ember.get(headerViewClass);\n    } else {\n      return headerViewClass;\n    }\n  }).property('headerViewClass'),\n  _contentViewClass: Ember.computed(function() {\n    var contentViewClass;\n    contentViewClass = this.get('contentViewClass');\n    if (typeof contentViewClass === 'string') {\n      return Ember.get(contentViewClass);\n    } else {\n      return contentViewClass;\n    }\n  }).property('contentViewClass'),\n  _footerViewClass: Ember.computed(function() {\n    var footerViewClass;\n    footerViewClass = this.get('footerViewClass');\n    if (typeof footerViewClass === 'string') {\n      return Ember.get(footerViewClass);\n    } else {\n      return footerViewClass;\n    }\n  }).property('footerViewClass'),\n  sizeClass: Ember.computed(function() {\n    switch (this.get('size')) {\n      case 'large':\n        return 'modal-lg';\n      case 'small':\n        return 'modal-sm';\n      default:\n        return '';\n    }\n  }).property('size'),\n  actions: {\n    sendCancel: function() {\n      var cancel;\n      if (!this.get('isShowing')) {\n        return;\n      }\n      cancel = this.get('cancel');\n      if (typeof cancel === 'function') {\n        this.cancel(this);\n      } else {\n        this.sendAction('cancel');\n      }\n      return this.hide();\n    },\n    sendConfirm: function() {\n      var confirm;\n      if (!this.get('isShowing')) {\n        return;\n      }\n      confirm = this.get('confirm');\n      if (typeof confirm === 'function') {\n        this.confirm(this);\n      } else {\n        this.sendAction('confirm');\n      }\n      return this.hide();\n    },\n    sendClose: function() {\n      var close;\n      if (!this.get('isShowing')) {\n        return;\n      }\n      close = this.get('close');\n      if (typeof close === 'function') {\n        this.close(this);\n      } else {\n        this.sendAction('close');\n      }\n      return this.hide();\n    }\n  },\n  didInsertElement: function() {\n    this._super();\n    if (this.get('fade')) {\n      this.$()[0].offsetWidth;\n    }\n    if (this.get('backdrop')) {\n      this._appendBackdrop();\n    }\n    Ember.run.next(this, function() {\n      return this.set('isShowing', true);\n    });\n    $(document.body).addClass('modal-open');\n    return this._setupDocumentHandlers();\n  },\n  willDestroyElement: function() {\n    this._super();\n    this._removeDocumentHandlers();\n    if (this._backdrop) {\n      return this._backdrop.remove();\n    }\n  },\n  keyHandler: Ember.computed(function() {\n    var _this = this;\n    return function(event) {\n      if (event.which === 27 && _this.get('escToCancel')) {\n        return _this.send('sendCancel');\n      }\n    };\n  }),\n  click: function(event) {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    if (!this.get('enforceModality')) {\n      return this.send('sendCancel');\n    }\n  },\n  hide: function() {\n    var _this = this;\n    this.set('isShowing', false);\n    $(document.body).removeClass('modal-open');\n    if (this._backdrop) {\n      this._backdrop.removeClass('in');\n    }\n    if (this.get('fadeEnabled')) {\n      return this.$().one($.support.transition.end, function() {\n        return Ember.run(_this, _this.destroy);\n      });\n    } else {\n      return Ember.run(this, this.destroy);\n    }\n  },\n  _appendBackdrop: function() {\n    var modalPaneBackdrop, parentLayer;\n    parentLayer = this.$().parent();\n    modalPaneBackdrop = this.get('modalPaneBackdrop');\n    if (this.get('fadeEnabled')) {\n      this._backdrop = jQuery(modalPaneBackdrop).addClass('fade');\n    }\n    this._backdrop.appendTo(parentLayer);\n    return Ember.run.next(this, function() {\n      return this._backdrop.addClass('in');\n    });\n  },\n  _setupDocumentHandlers: function() {\n    var _this = this;\n    this._super();\n    if (!this._hideHandler) {\n      this._hideHandler = function() {\n        return _this.hide();\n      };\n      $(document).on('modal:hide', this._hideHandler);\n    }\n    return $(document).on('keyup', this.get('keyHandler'));\n  },\n  _removeDocumentHandlers: function() {\n    this._super();\n    $(document).off('modal:hide', this._hideHandler);\n    this._hideHandler = null;\n    return $(document).off('keyup', this.get('keyHandler'));\n  }\n});\n\nEmber.Widgets.ModalComponent.reopenClass({\n  rootElement: '.ember-application',\n  poppedModal: null,\n  hideAll: function() {\n    return $(document).trigger('modal:hide');\n  },\n  popup: function(options) {\n    var modal, rootElement;\n    if (options == null) {\n      options = {};\n    }\n    this.hideAll();\n    rootElement = options.rootElement || this.rootElement;\n    modal = this.create(options);\n    if (modal.get('targetObject.container')) {\n      modal.set('container', modal.get('targetObject.container'));\n    }\n    modal.appendTo(rootElement);\n    return modal;\n  }\n});\n\nEmber.Handlebars.helper('modal-component', Ember.Widgets.ModalComponent);\n\n\n})();//@ sourceURL=build/src/modal.js")

eval("(function() {\n\nEmber.Widgets.PopoverMixin = Ember.Mixin.create(Ember.Widgets.StyleBindingsMixin, Ember.Widgets.BodyEventListener, {\n  layoutName: 'popover',\n  classNames: ['popover'],\n  classNameBindings: ['isShowing:in', 'fadeEnabled:fade', 'placement'],\n  styleBindings: ['left', 'top', 'display', 'visibility'],\n  targetElement: null,\n  contentViewClass: null,\n  fade: true,\n  escToCancel: true,\n  placement: 'top',\n  display: 'block',\n  visibility: 'hidden',\n  debounceTime: 100,\n  fadeEnabled: Ember.computed(function() {\n    if (Ember.Widgets.DISABLE_ANIMATIONS) {\n      return false;\n    }\n    return this.get('fade');\n  }).property('fade'),\n  left: 0,\n  top: 0,\n  marginTop: 23,\n  marginLeft: 10,\n  isShowing: false,\n  inserted: false,\n  title: '',\n  content: '',\n  _resizeHandler: null,\n  _scrollHandler: null,\n  _contentViewClass: Ember.computed(function() {\n    if (this.get('contentViewClass')) {\n      return this.get('contentViewClass');\n    }\n    return Ember.View.extend({\n      content: Ember.computed.alias('parentView.content'),\n      templateName: 'view-parent-view-content'\n    });\n  }).property('contentViewClass'),\n  didInsertElement: function() {\n    this._super();\n    this.snapToPosition();\n    this.set('visibility', 'visible');\n    return this.set('isShowing', true);\n  },\n  bodyClick: function() {\n    return this.hide();\n  },\n  hide: function() {\n    var _this = this;\n    if (this.get('isDestroyed')) {\n      return;\n    }\n    this.set('isShowing', false);\n    if (this.get('fadeEnabled')) {\n      return this.$().one($.support.transition.end, function() {\n        return Ember.run(_this, _this.destroy);\n      });\n    } else {\n      return Ember.run(this, this.destroy);\n    }\n  },\n  /*\n  Calculate the offset of the given iframe relative to the top window.\n  - Walks up the iframe chain, checking the offset of each one till it reaches top\n  - Only works with friendly iframes.\n  - Takes into account scrolling, but comes up with a result relative to\n  top iframe, regardless of being visibile withing intervening frames.\n  \n  @param window win    the iframe we're interested in (e.g. window)\n  @param object pos   an object containing the offset so far:\n  { left: [x], top: [y] }\n  (optional - initializes with 0,0 if undefined)\n  @return pos object above\n  \n  via http://stackoverflow.com/a/9676655\n  */\n\n  computeFrameOffset: function(win, pos) {\n    var found, frame, frames, rect, _i, _len;\n    if (pos == null) {\n      pos = {\n        top: 0,\n        left: 0\n      };\n    }\n    frames = win.parent.document.getElementsByTagName(\"iframe\");\n    found = false;\n    for (_i = 0, _len = frames.length; _i < _len; _i++) {\n      frame = frames[_i];\n      if (frame.contentWindow === win) {\n        found = true;\n        break;\n      }\n    }\n    if (found) {\n      rect = frame.getBoundingClientRect();\n      pos.left += rect.left;\n      pos.top += rect.top;\n      if (win !== top) {\n        this.computeFrameOffset(win.parent, pos);\n      }\n    }\n    return pos;\n  },\n  getOffset: function($target) {\n    var doc, pos, win;\n    pos = $target.offset();\n    doc = $target[0].ownerDocument;\n    win = doc.defaultView;\n    return this.computeFrameOffset(win, pos);\n  },\n  snapToPosition: function() {\n    var $target, actualHeight, actualWidth, pos;\n    $target = $(this.get('targetElement'));\n    if ((this.get('_state') || this.get('state')) !== 'inDOM') {\n      return;\n    }\n    actualWidth = this.$()[0].offsetWidth;\n    actualHeight = this.$()[0].offsetHeight;\n    if (Ember.isEmpty($target)) {\n      pos = {\n        top: this.get('top'),\n        left: this.get('left'),\n        width: 0,\n        height: 0\n      };\n    } else {\n      pos = this.getOffset($target);\n      pos.width = $target[0].offsetWidth;\n      pos.height = $target[0].offsetHeight;\n    }\n    switch (this.get('placement')) {\n      case 'bottom':\n        this.set('top', pos.top + pos.height);\n        this.set('left', pos.left + pos.width / 2 - actualWidth / 2);\n        break;\n      case 'top':\n        this.set('top', pos.top - actualHeight);\n        this.set('left', pos.left + pos.width / 2 - actualWidth / 2);\n        break;\n      case 'top-right':\n        this.set('top', pos.top);\n        this.set('left', pos.left + pos.width);\n        break;\n      case 'top-left':\n        this.set('top', pos.top);\n        this.set('left', pos.left - actualWidth);\n        break;\n      case 'bottom-right':\n        this.set('top', pos.top + pos.height);\n        this.set('left', pos.left + pos.width - actualWidth);\n        break;\n      case 'bottom-left':\n        this.set('top', pos.top + pos.height);\n        this.set('left', pos.left);\n        break;\n      case 'left':\n        this.set('top', pos.top - this.get('marginTop'));\n        this.set('left', pos.left - actualWidth);\n        break;\n      case 'right':\n        this.set('top', pos.top - this.get('marginTop'));\n        this.set('left', pos.left + pos.width);\n        break;\n    }\n    this.correctIfOffscreen();\n    if (!Ember.isEmpty($target)) {\n      return this.positionArrow();\n    }\n  },\n  positionArrow: function() {\n    var $target, arrowSize, left, pos, top;\n    $target = $(this.get('targetElement'));\n    pos = this.getOffset($target);\n    pos.width = $target[0].offsetWidth;\n    pos.height = $target[0].offsetHeight;\n    arrowSize = 22;\n    switch (this.get('placement')) {\n      case 'left':\n      case 'right':\n        top = pos.top + pos.height / 2 - this.get('top') - arrowSize / 2;\n        return this.set('arrowStyle', \"margin-top:\" + top + \"px;\");\n      case 'top':\n      case 'bottom':\n        left = pos.left + pos.width / 2 - this.get('left') - arrowSize / 2;\n        return this.set('arrowStyle', \"margin-left:\" + left + \"px;\");\n    }\n  },\n  correctIfOffscreen: function() {\n    var actualHeight, actualWidth, bodyHeight, bodyWidth;\n    bodyWidth = $('body').width();\n    bodyHeight = $('body').height();\n    actualWidth = this.$()[0].offsetWidth;\n    actualHeight = this.$()[0].offsetHeight;\n    if (this.get('left') + actualWidth > bodyWidth) {\n      this.set('left', bodyWidth - actualWidth - this.get('marginLeft'));\n    }\n    if (this.get('left') < 0) {\n      this.set('left', this.get('marginLeft'));\n    }\n    if (this.get('top') + actualHeight > bodyHeight) {\n      this.set('top', bodyHeight - actualHeight - this.get('marginTop'));\n    }\n    if (this.get('top') < 0) {\n      return this.set('top', this.get('marginTop'));\n    }\n  },\n  keyHandler: Ember.computed(function() {\n    var _this = this;\n    return function(event) {\n      if (event.keyCode === 27 && _this.get('escToCancel')) {\n        return _this.hide();\n      }\n    };\n  }),\n  debounceSnapToPosition: Ember.computed(function() {\n    var _this = this;\n    return function() {\n      return Ember.run.debounce(_this, _this.snapToPosition, _this.get('debounceTime'));\n    };\n  }),\n  _setupDocumentHandlers: function() {\n    var _this = this;\n    this._super();\n    if (!this._hideHandler) {\n      this._hideHandler = function() {\n        return _this.hide();\n      };\n      $(document).on('popover:hide', this._hideHandler);\n    }\n    if (!this._resizeHandler) {\n      this._resizeHandler = this.get('debounceSnapToPosition');\n      $(document).on('resize', this._resizeHandler);\n    }\n    if (!this._scrollHandler) {\n      this._scrollHandler = this.get('debounceSnapToPosition');\n      $(document).on('scroll', this._scrollHandler);\n    }\n    return $(document).on('keyup', this.get('keyHandler'));\n  },\n  _removeDocumentHandlers: function() {\n    this._super();\n    $(document).off('popover:hide', this._hideHandler);\n    this._hideHandler = null;\n    $(document).off('resize', this._resizeHandler);\n    this._resizeHandler = null;\n    $(document).off('scroll', this._scrollHandler);\n    this._scrollHandler = null;\n    return $(document).off('keyup', this.get('keyHandler'));\n  }\n});\n\nEmber.Widgets.PopoverComponent = Ember.Component.extend(Ember.Widgets.PopoverMixin);\n\nEmber.Widgets.PopoverComponent.reopenClass({\n  rootElement: '.ember-application',\n  hideAll: function() {\n    return $(document).trigger('popover:hide');\n  },\n  popup: function(options) {\n    var popover, rootElement;\n    this.hideAll();\n    rootElement = options.rootElement || this.rootElement;\n    popover = this.create(options);\n    if (popover.get('targetObject.container')) {\n      popover.set('container', popover.get('targetObject.container'));\n    }\n    popover.appendTo(rootElement);\n    return popover;\n  }\n});\n\nEmber.Handlebars.helper('popover-component', Ember.Widgets.PopoverComponent);\n\n\n})();//@ sourceURL=build/src/popover.js")

eval("(function() {\n\nEmber.Widgets.PopoverLinkComponent = Ember.Component.extend({\n  classNames: ['popover-link'],\n  classNameBindings: ['disabled'],\n  placement: 'top',\n  content: null,\n  title: null,\n  contentViewClass: null,\n  disabled: false,\n  popoverClassNames: [],\n  rootElement: '.ember-application',\n  fade: true,\n  _contentViewClass: Ember.computed(function() {\n    var contentViewClass;\n    contentViewClass = this.get('contentViewClass');\n    if (typeof contentViewClass === 'string') {\n      return Ember.get(contentViewClass);\n    }\n    return contentViewClass;\n  }).property('contentViewClass'),\n  click: function(event) {\n    var popover, popoverView;\n    if (this.get('disabled')) {\n      return;\n    }\n    popover = this.get('_popover');\n    if (((popover != null ? popover.get('_state') : void 0) || (popover != null ? popover.get('state') : void 0)) === 'inDOM') {\n      return popover.hide();\n    } else {\n      popoverView = Ember.View.extend(Ember.Widgets.PopoverMixin, {\n        layoutName: 'popover-link-popover',\n        classNames: this.get('popoverClassNames'),\n        controller: this,\n        targetElement: this.get('element'),\n        container: this.get('container'),\n        placement: Ember.computed.alias('controller.placement'),\n        title: Ember.computed.alias('controller.title'),\n        contentViewClass: this.get('_contentViewClass'),\n        fade: this.get('fade')\n      });\n      popover = popoverView.create();\n      this.set('_popover', popover);\n      return popover.appendTo(this.get('rootElement'));\n    }\n  }\n});\n\nEmber.Handlebars.helper('popover-link-component', Ember.Widgets.PopoverLinkComponent);\n\n\n})();//@ sourceURL=build/src/popover_link.js")

eval("(function() {\n\nvar colorNameToHexMap, colorToHex, rgbToHex;\n\nrgbToHex = function(r, g, b) {\n  return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n};\n\ncolorNameToHexMap = {\n  aliceblue: \"#f0f8ff\",\n  antiquewhite: \"#faebd7\",\n  aqua: \"#00ffff\",\n  aquamarine: \"#7fffd4\",\n  azure: \"#f0ffff\",\n  beige: \"#f5f5dc\",\n  bisque: \"#ffe4c4\",\n  black: \"#000000\",\n  blanchedalmond: \"#ffebcd\",\n  blue: \"#0000ff\",\n  blueviolet: \"#8a2be2\",\n  brown: \"#a52a2a\",\n  burlywood: \"#deb887\",\n  cadetblue: \"#5f9ea0\",\n  chartreuse: \"#7fff00\",\n  chocolate: \"#d2691e\",\n  coral: \"#ff7f50\",\n  cornflowerblue: \"#6495ed\",\n  cornsilk: \"#fff8dc\",\n  crimson: \"#dc143c\",\n  cyan: \"#00ffff\",\n  darkblue: \"#00008b\",\n  darkcyan: \"#008b8b\",\n  darkgoldenrod: \"#b8860b\",\n  darkgray: \"#a9a9a9\",\n  darkgreen: \"#006400\",\n  darkkhaki: \"#bdb76b\",\n  darkmagenta: \"#8b008b\",\n  darkolivegreen: \"#556b2f\",\n  darkorange: \"#ff8c00\",\n  darkorchid: \"#9932cc\",\n  darkred: \"#8b0000\",\n  darksalmon: \"#e9967a\",\n  darkseagreen: \"#8fbc8f\",\n  darkslateblue: \"#483d8b\",\n  darkslategray: \"#2f4f4f\",\n  darkturquoise: \"#00ced1\",\n  darkviolet: \"#9400d3\",\n  deeppink: \"#ff1493\",\n  deepskyblue: \"#00bfff\",\n  dimgray: \"#696969\",\n  dodgerblue: \"#1e90ff\",\n  firebrick: \"#b22222\",\n  floralwhite: \"#fffaf0\",\n  forestgreen: \"#228b22\",\n  fuchsia: \"#ff00ff\",\n  gainsboro: \"#dcdcdc\",\n  ghostwhite: \"#f8f8ff\",\n  gold: \"#ffd700\",\n  goldenrod: \"#daa520\",\n  gray: \"#808080\",\n  green: \"#008000\",\n  greenyellow: \"#adff2f\",\n  honeydew: \"#f0fff0\",\n  hotpink: \"#ff69b4\",\n  \"indianred \": \"#cd5c5c\",\n  indigo: \"#4b0082\",\n  ivory: \"#fffff0\",\n  khaki: \"#f0e68c\",\n  lavender: \"#e6e6fa\",\n  lavenderblush: \"#fff0f5\",\n  lawngreen: \"#7cfc00\",\n  lemonchiffon: \"#fffacd\",\n  lightblue: \"#add8e6\",\n  lightcoral: \"#f08080\",\n  lightcyan: \"#e0ffff\",\n  lightgoldenrodyellow: \"#fafad2\",\n  lightgrey: \"#d3d3d3\",\n  lightgreen: \"#90ee90\",\n  lightpink: \"#ffb6c1\",\n  lightsalmon: \"#ffa07a\",\n  lightseagreen: \"#20b2aa\",\n  lightskyblue: \"#87cefa\",\n  lightslategray: \"#778899\",\n  lightsteelblue: \"#b0c4de\",\n  lightyellow: \"#ffffe0\",\n  lime: \"#00ff00\",\n  limegreen: \"#32cd32\",\n  linen: \"#faf0e6\",\n  magenta: \"#ff00ff\",\n  maroon: \"#800000\",\n  mediumaquamarine: \"#66cdaa\",\n  mediumblue: \"#0000cd\",\n  mediumorchid: \"#ba55d3\",\n  mediumpurple: \"#9370d8\",\n  mediumseagreen: \"#3cb371\",\n  mediumslateblue: \"#7b68ee\",\n  mediumspringgreen: \"#00fa9a\",\n  mediumturquoise: \"#48d1cc\",\n  mediumvioletred: \"#c71585\",\n  midnightblue: \"#191970\",\n  mintcream: \"#f5fffa\",\n  mistyrose: \"#ffe4e1\",\n  moccasin: \"#ffe4b5\",\n  navajowhite: \"#ffdead\",\n  navy: \"#000080\",\n  oldlace: \"#fdf5e6\",\n  olive: \"#808000\",\n  olivedrab: \"#6b8e23\",\n  orange: \"#ffa500\",\n  orangered: \"#ff4500\",\n  orchid: \"#da70d6\",\n  palegoldenrod: \"#eee8aa\",\n  palegreen: \"#98fb98\",\n  paleturquoise: \"#afeeee\",\n  palevioletred: \"#d87093\",\n  papayawhip: \"#ffefd5\",\n  peachpuff: \"#ffdab9\",\n  peru: \"#cd853f\",\n  pink: \"#ffc0cb\",\n  plum: \"#dda0dd\",\n  powderblue: \"#b0e0e6\",\n  purple: \"#800080\",\n  red: \"#ff0000\",\n  rosybrown: \"#bc8f8f\",\n  royalblue: \"#4169e1\",\n  saddlebrown: \"#8b4513\",\n  salmon: \"#fa8072\",\n  sandybrown: \"#f4a460\",\n  seagreen: \"#2e8b57\",\n  seashell: \"#fff5ee\",\n  sienna: \"#a0522d\",\n  silver: \"#c0c0c0\",\n  skyblue: \"#87ceeb\",\n  slateblue: \"#6a5acd\",\n  slategray: \"#708090\",\n  snow: \"#fffafa\",\n  springgreen: \"#00ff7f\",\n  steelblue: \"#4682b4\",\n  tan: \"#d2b48c\",\n  teal: \"#008080\",\n  thistle: \"#d8bfd8\",\n  tomato: \"#ff6347\",\n  turquoise: \"#40e0d0\",\n  violet: \"#ee82ee\",\n  wheat: \"#f5deb3\",\n  white: \"#ffffff\",\n  whitesmoke: \"#f5f5f5\",\n  yellow: \"#ffff00\",\n  yellowgreen: \"#9acd32\"\n};\n\ncolorToHex = function(color) {\n  var blue, digits, green, opacity, red;\n  if (!color) {\n    return color;\n  }\n  if (color.substr(0, 1) === \"#\" || color === \"transparent\") {\n    return color.toLowerCase();\n  }\n  if (color in colorNameToHexMap) {\n    return colorNameToHexMap[color.toLowerCase()];\n  }\n  digits = /(.*?)rgb(a)?\\((\\d+), (\\d+), (\\d+)(, (\\d+))?\\)/.exec(color);\n  if ((digits != null ? digits.length : void 0) === 8) {\n    red = parseInt(digits[3]);\n    green = parseInt(digits[4]);\n    blue = parseInt(digits[5]);\n    opacity = parseInt(digits[7]);\n    if (opacity === 0) {\n      return \"transparent\";\n    }\n    return rgbToHex(red, green, blue);\n  }\n  return void 0;\n};\n\nEmber.Widgets.ColorPicker = Ember.Component.extend({\n  layoutName: 'color-picker',\n  classNames: ['color-picker-button'],\n  colorPickerPlacement: 'right',\n  dropdownClass: null,\n  INITIAL_COLOR: '#0074D9',\n  selectedColor: '#0074D9',\n  selectedColorRGB: Ember.computed(function() {\n    return colorToHex(this.get('selectedColor'));\n  }).property('selectedColor'),\n  customColor: '',\n  isColorTransparent: Ember.computed.equal('selectedColorRGB', 'transparent'),\n  colorRows: Ember.A([Ember.A(['#000000', '#111111', '#434343', '#666666', '#999999', '#AAAAAA', '#B7B7B7', '#CCCCCC', '#D9D9D9', '#EFEFEF', '#F3F3F3', '#FFFFFF']), Ember.A(['#001F3F', '#0074D9', '#7FDBFF', '#39CCCC', '#2ECC40', '#01FF70', '#FFDC00', '#FF851B', '#FF4136', '#85144B', '#B10DC9', 'transparent'])]),\n  setCustomColor: Ember.observer(function() {\n    if (this.get('isCustomColorValid') === true) {\n      return this.set('selectedColor', this.get('customColor'));\n    }\n  }, 'customColor', 'isCustomColorValid'),\n  isCustomColorValid: Ember.computed(function() {\n    return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(\"\" + (this.get('customColor')));\n  }).property('customColor'),\n  customColorCSS: Ember.computed(function() {\n    return \"background-color: \" + (this.get('customColor'));\n  }).property('customColor'),\n  actions: {\n    setColor: function(color) {\n      this.set('customColor', '');\n      return this.set('selectedColor', color);\n    }\n  },\n  userDidSelect: function(selection) {\n    return this.sendAction('userSelected', selection);\n  }\n});\n\nEmber.Widgets.ColorPickerCell = Ember.View.extend(Ember.Widgets.StyleBindingsMixin, {\n  templateName: 'color-picker-cell',\n  classNames: ['pull-left', 'color-picker-cell'],\n  classNameBindings: Ember.A(['isActive:active:inactive']),\n  styleBindings: 'color:background-color',\n  color: null,\n  isActive: Ember.computed(function() {\n    return colorToHex(this.get('controller.selectedColor')) === colorToHex(this.get('color'));\n  }).property('controller.selectedColor', 'color'),\n  click: function(event) {\n    this.get('controller').send('setColor', this.get('color'));\n    return this.get('controller').userDidSelect(this.get('color'));\n  }\n});\n\n\n})();//@ sourceURL=build/src/color_picker.js")